/**
 *  File name     :  CalendarStuff.java
 *  Purpose       :  Provides a class with supporting methods for CountTheDays.java program
 *  Author        :  B.J. Johnson (prototype)
 *  Date          :  2017-01-02 (prototype)
 *  Author        :  Tapiwa Tafa
 *  Date          :  22/01/18
 *  Description   :  This file provides the supporting methods for the CountTheDays program which will
 *                   calculate the number of days between two dates.  It shows the use of modularization
 *                   when writing Java code, and how the Java compiler can "figure things out" on its
 *                   own at "compile time".  It also provides examples of proper documentation, and uses
 *                   the source file header template as specified in the "Greeter.java" template program
 *                   file for use in CMSI 186, Spring 2017.
 *  Notes         :  None
 *  Warnings      :  None
 *  Exceptions    :  None
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  Revision History
 *  ----------------
 *            Rev      Date     Modified by:  Reason for change/modification
 *           -----  ----------  ------------  -----------------------------------------------------------
 *  @version 1.0.0  2017-01-02  B.J. Johnson  Initial writing and release
 *  @version 1.0.1  2017-12-25  B.J. Johnson  Updated for Spring 2018
 */

public class CalendarStuff {

  /**
   * A listing of the days of the week, assigning numbers; Note that the week arbitrarily starts on Sunday
   */
   private static final int SUNDAY    = 0;
   private static final int MONDAY    = SUNDAY    + 1;
   private static final int TUESDAY   = MONDAY    + 1;
   private static final int WEDNESDAY = TUESDAY   + 1;
   private static final int THURSDAY  = WEDNESDAY + 1;
   private static final int FRIDAY    = THURSDAY  + 1;
   private static final int SATURDAY  = FRIDAY    + 1;
  // you can finish the rest on your own
  
  /**
   * A listing of the months of the year, assigning numbers; I suppose these could be ENUMs instead, but whatever
   */


   private static final int JANUARY    = 0;
   private static final int FEBRUARY   = JANUARY   + 1;
   private static final int MARCH   = FEBRUARY   + 1;
   private static final int APRIL   = MARCH   + 1;
   private static final int MAY   = APRIL   + 1;
   private static final int JUNE   = MAY   + 1;
   private static final int JULY   = JUNE   + 1;
   private static final int AUGUST   = JULY   + 1;
   private static final int SEPTEMBER   = AUGUST   + 1;
   private static final int OCTOBER   = SEPTEMBER   + 1;
   private static final int NOVEMBER   = OCTOBER   + 1;
   private static final int DECEMBER   = NOVEMBER   + 1;
 
  // you can finish these on your own, too
  
  /**
   * An array containing the number of days in each month
   *  NOTE: this excludes leap years, so those will be handled as special cases
   *  NOTE: this is optional, but suggested
   */
   private static int[]    days        = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
 


  /**
   * The constructor for the class
   */
   public CalendarStuff() {
      System.out.println( "Constructor called..." );  // replace this with the actual code
   }

  /**
   * A method to determine if the year argument is a leap year or not<br />
   *  Leap years are every four years, except for even-hundred years, except for every 400
   * @param    year  long containing four-digit year
   * @return         boolean which is true if the parameter is a leap year
   */
   public static boolean isLeapYear( long year ) {
      if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) {
    return true;
  } else {
    return false;
  }  // replace this with the actual code
   }

   public static int LeapYearDays( int year ) {
      if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) {
    return year;
  } else {
    return 0;
  }  // replace this with the actual code
   }

  /**
   * A method to calculate the days in a month, including leap years
   * @param    month long containing month number, starting with "1" for "January"
   * @param    year  long containing four-digit year; required to handle Feb 29th
   * @return         long containing number of days in referenced month of the year
   * notes: remember that the month variable is used as an indix, and so must
   *         be decremented to make the appropriate index value
   */
   public static long daysInMonth( long month, long year ) {

    if (month == 2 && (year % 400 == 0) || (month == 2) && (((year % 4 == 0) && (year % 100 != 0)))) {
    return 29;
  }
   if (month == 2) {
    return 28;
  } 
   if ( month == 1 || month ==  3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) { 
    return 31;
  }
    if (month == 4 || month == 6 || month == 11 || month == 9) { 
    return 30;
  } 
    else {
    return 0;
  }
   }


  /**
   * A method to determine if two dates are exactly equal
   * @param    month1 long    containing month number, starting with "1" for "January"
   * @param    day1   long    containing day number
   * @param    year1  long    containing four-digit year
   * @param    month2 long    containing month number, starting with "1" for "January"
   * @param    day2   long    containing day number
   * @param    year2  long    containing four-digit year
   * @return          boolean which is true if the two dates are exactly the same
   */
   public static boolean dateEquals( long month1, long day1, long year1, long month2, long day2, long year2 ) {
    if (month1 == month2 && day1 == day2 && year1 == year2) {
      return true;  // replace this with the actual code
  }
    else {
      return false;
  }
   }

  /**
   * A method to compare the ordering of two dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          int    -1/0/+1 if first date is less than/equal to/greater than second
   */
   public static int compareDate( long month1, long day1, long year1, long month2, long day2, long year2 ) {
    if ((month1 == month2) && (day1 == day2) && (year1 == year2)) {
      return 0;  // replace this with the actual code
    }
    if ((month1 == month2) && (day1 == day2) && (year1 > year2)) {
      return 1;
    }
    if((month1 == month2) && (day1 == day2) && (year1 < year2)) {
      return -1;
    }
    if ((month1 > month2) && (day1 == day2) && (year1 == year2)) {
      return 1;
    }
    if ((month1 < month2) && (day1 == day2) && (year1 == year2)) {
      return -1;
    }
    if ((month1 == month2) && (day1 > day2) && (year1 == year2)) {
      return 1;
    }
    if ((month1 == month2) && (day1 < day2) && (year1 == year2)) {
      return -1;
    }
    else {
      return 1;
    }

   }

  /**
   * A method to return whether a date is a valid date
   * @param    month long    containing month number, starting with "1" for "January"
   * @param    day   long    containing day number
   * @param    year  long    containing four-digit year
   * @return         boolean which is true if the date is valid
   * notes: remember that the month and day variables are used as indices, and so must
   *         be decremented to make the appropriate index value
   */
   public static boolean isValidDate( long month, long day, long year ) {

     if ((month == 2) && (year % 400 == 0) && (day == 29) || (month == 2) && (((year % 4 == 0) && (year % 100 != 0) && (day == 29)))) {
    return true;
  }
    if ((month == 2) && (year % 400 != 0) && (day == 29) || (month == 2) && (((year % 4 != 0) && (year % 100 == 0) && (day == 29)))) {
    return false;
  }
    if(((month >= 1) && (month <=12 )) && ((day >= 1) && (day <= 31))) {
      return true;
    }
    else {
      return false;
    }
       // replace this with the actual code
   }

  /**
   * A method to return a string version of the month name
   * @param    month long   containing month number, starting with "1" for "January"
   * @return         String containing the string value of the month (no spaces)
   */
   public static String toMonthString( int month ) {
    if( month == 1) {
      return "January";
    }
    if( month == 2) {
      return "February";
    }
    if( month == 3) {
      return "March";
    }
    if( month == 4) {
      return "April";
    }
    if( month == 5) {
      return "May";
    }
    if( month == 6) {
      return "June";
    }
    if( month == 7) {
      return "July";
    }
    if( month == 8) {
      return "August";
    }
    if( month == 9) {
      return "September";
    }
    if( month == 10) {
      return "October";
    }
    if( month == 11) {
      return "November";
    }
    if( month == 12) {
      return "December";
    }
    else {
      return "Illegal month value given to 'toMonthString()'.";
    }
   }

  /**
   * A method to return a string version of the day of the week name
   * @param    day int    containing day number, starting with "1" for "Sunday"
   * @return       String containing the string value of the day (no spaces)
   */
   public static String toDayOfWeekString( int day ) {
    if( day == 1) {
      return "Sunday";
    }
    if( day == 2) {
      return "Monday";
    }
    if( day == 3) {
      return "Tuesday";
    }
    if( day == 4) {
      return "Wednesday";
    }
    if( day == 5) {
      return "Thursday";
    }
    if( day == 6) {
      return "Friday";
    }
    if( day == 7) {
      return "Saturday";
    }
    else {
      return "Illegal day value given to 'toDayOfWeekString()'.";
    }
   }

  /**
   * A method to return a count of the total number of days between two valid dates
   * @param    month1 long   containing month number, starting with "1" for "January"
   * @param    day1   long   containing day number
   * @param    year1  long   containing four-digit year
   * @param    month2 long   containing month number, starting with "1" for "January"
   * @param    day2   long   containing day number
   * @param    year2  long   containing four-digit year
   * @return          long   count of total number of days
   */
   public static long daysBetween( long month1, long day1, long year1, long month2, long day2, long year2 ) {

   

   int y1 = (int) year1;
   int y2 = (int) year2;
   int d1 = (int) day1;
   int d2 = (int) day2;
   int m1 = (int) month1;
   int m2 = (int) month2;

int n1 = ((int)y1 * 365) + (int)d1;

int i=0;

    for ( i=0; i<m1 - 1; i++) 

      
        n1 += days[(int)m1 -1];
 
    int n3 = n1 + LeapYearDays(y1);

 
    int n2 = (y2*365) + d2;

    for (i=0; i<m2 - 1; i++) 
        n2 += days[(int)m2 -1];
   int n4 = n2 + LeapYearDays(y2);

    long result=  (long)n4 - (long)n3;

    { return result; }
  }
}

